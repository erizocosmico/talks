#+theme=graphite

Introduction to Go
18 May 2016

Miguel Molina
@migrrrr
https://github.com/mvader

* About me

- Former frontend developer at *Upplication*
- Full stack web developer at *source{d}* working with JavaScript and Go

* Table of contents

- About Go
- Basic types and control structures
- Functions
- Structs and Interfaces
- The error model
- Concurrency
- Packages
- Generics
- Tools
- Who is using Go?

* About Go

- compiled
- statically and strongly typed
- garbage collected
- created by Robert Griesemer, Rob Pike and Ken Thompson on 2007 at Google
- Announced on 2009
- 1.0 version released on 2012

* Goals of Go

- Be memory safe
- Easy multithreaded and concurrent programming
- Blazing fast compilation
- Avoid a verbose type system (Java, C++, ...)
- Easy dependency management
- Everyone that knows Go should read and understand a Go codebase

* Hello world

.play code/hello.go

* Hello world on the web

.play code/hellonet.go

* Basic types

.code code/types.go /^var/,/^\)/

* Our own types

We can make our own named types.

  type MyInt int

* Arrays and slices

.code code/arrays.go

* Differences between arrays and slices

- An array has a fixed length
- A slice can grow automatically as you append elements
- Passing an array to a function copies all the elements
- Passing a slice to a function does not

As a result of this, arrays are rarely used in Go. Slices are used instead because of their flexibility.

* Maps

A map is a structure that defines a relationship between a key and a value.

.code code/maps.go

* Pointers

Yes, you heard well. Go has pointers.

.image https://media.giphy.com/media/1p7AQGCLlzxQc/giphy.gif

* Pointers

.play code/pointers.go /^func main/,/^}/

* Control structures

- if
- for
- switch
- select (we won't see that now, though)

* if statement

Notice that there are no parens! üéâ

.play code/if.go /^func main/,/^}/

* if statement

If allows an initialization statement.

.code code/if_init.go /^func main/,/^}/

* for loop

Go has just one type of loop. No foreach, no while, no nothing else.

As the Golang team says:

  Do less, enable more.

* for loop

The old-school for loop we all know and love.

.play code/for.go /^func main/,/^}/

* for loop

The while for loop.

.play code/for_while.go /^func main/,/^}/

* for loop

Infinite loop. We're not running this one.

.code code/for_infinite.go /^func main/,/^}/

* for loop

This kind of for each, loops over iterable values: slices, arrays, channels, and maps.

.play code/for_range.go /^func main/,/^}/

* switch

We all know switch.

.play code/switch.go /^func main/,/^}/

* Functions

.play code/funcs1.go

* Functions

Functions can receive an unspecified number of arguments.

  func Foo(a int, b ...string)

Functions can return more than one element.

  func Foo() (int, string, Foo)

* Functions are first class values

.play code/funcs3.go /^func main/,/^}/

* Functions have their type

  type StringHasher func(string) int64

* Structs

Does Go have classes? Nope. But it does have structs.

.code code/structs.go

* Structs

.play code/structs_init.go /^func main/,/^}/

* Structs

.play code/structs_ptr.go /^func main/,/^}/

* Struct composition

As we don't have classes, we can't have subclasses. But fear not! Composition comes to the rescue!

.code code/struct_comp.go

* Struct composition

.play code/struct_comp2.go /^func main/,/^}/

* Interfaces

A powerful tool for abstraction. Remember the "implements" keyword from languages like Java? Then forget about it. In Go, types implement the interfaces implicitly.

.code code/interfaces.go

* Interfaces

.play code/interfaces2.go /^func main/,/^}/

* Interfaces

Interfaces can also be composed.

.code code/interface_comp.go

* The error model

Go does not have exceptions. It has panics, but that is not the way you check errors. Panics should not happen. Instead, functions return errors you need to check.

.play code/errors.go /^func main/,/^}/

* Panics and recoveries

.play code/panic.go /^func main/,/^}/

.image https://media.giphy.com/media/KmTnUKop0AfFm/giphy.gif

* Panics and recoveries

.play code/recover.go /^func main/,/^}/

* Concurrency

Go has two built-in things for concurrency.

- Channels
- Goroutines

* Goroutines

A Goroutine is a lightweight thread of execution. There can be multiple goroutines in one actual OS thread.

* Goroutines

Let's imagine we have an expensive computation like calculating `n+1`.

.code code/goro1.go /^func plusOne/,/^}/
.play code/goro1.go /^func main/,/^}/

* Goroutines

Now, how do we make it parallel? using the keyword `go`.

.play code/goro2.go /^func main/,/^}/

But the program exits before the goroutines are executed.

* Goroutines

How can we fix it?

- channels
- `sync.WaitGroup`
- etc

* Goroutines

Purrfect üëç

.play code/goro3.go /^func main/,/^}/

Note that they are not in order!

* Channels

A channel is like a tube where you can send an receive things from. You receive the things in the same order you sent them and only once in a synchronous way.

You can create a channel with `make`.

  var myChan = make(chan int)

You can also give a buffer to channels (how many items accept until block).

  var myBufferedChan = make(chan int, 2)

* Channels

- Send and receive operations are blocking. You can't send until someone is reading and you can't receive until someone sends something.
- Nil channels block forever.
- Sending on a closed channel causes a panic.

* Channels

Let's see some action.

.code code/chans1.go

But that does NOT work. As I said, sending needs someone reading, so it will block forever.

* Channels

Now it works.

.play code/chans2.go /^func main/,/^}/

* Packages

You must have noticed this line.

  package main

This is to declare in which package the file is in. A package is a group of files inside a folder.

* Packages

- Names should be concise and short
- `main` function needs to be on the `main` package
- All files in the same directory must have the same package name

* Public, private, protected, ...

As you must have noticed, there is no private or protected or public. Go has a clever trick for this.

- Everything that starts with an uppercase letter is public outside it's package.
- Everything that stats with a lowercase letter is private outside it's package.
- Everything is visible from inside the package.

  type myPrivateType int64
  type MyPublicType int64

Again, do less, enable more.

* Imports

.code code/imports.go

* Imports

Imports are the absolute path from the `$GOPATH` directory.

Imagine we have a directory here:

  $GOPATH/src/github.com/foo/bar

The import would be:

  import "github.com/foo/bar"

And we access the members of the package like this:

  bar.MyThing

* Why?

Why all this? you must be wondering.

- All in one place
- No need for `package.json`, `Gemfile`, etc.

Downsides?

- Same version of the package for everything (but that's a good thing, it forces you to be up to date)

* Install packages

  go get github.com/foo/bar

It automatically knows if a URL is from a git, svn, bazaar or mercurial repository and downloads it.

We can also install all the dependencies of our code like this:

  go get ./...

And update them like this:

  go get -u ./...

* Cool tools for packages

A cool thing about all this is that allows for tools like this to be built:

- `GoDoc`: any go gettable dependency has out of the box a documentation page.

.link http://godoc.org/github.com/gin-gonic/gin

- `gopkg.in`: allows versioning via URL (it overcomes the downsides mentioned before!) using control version tags without doing anything else. It just works.

.link http://gopkg.in/mgo.v2

Again, do less, enable more.

* Generics

So, we've cover almost the whole language but generics have not been mentioned. Why?

Because Go does not have generics üò±üò∞üò®(and it won't probably have them for a long time)

.image https://media.giphy.com/media/ze5w99aUxJrsA/giphy.gif

* What do we do instead?

- interfaces
- `interface{}`

* interface{}

Just like you can declare struct types inline you can declare interface types inline. An interface with no methods is implemented by every other type, that is, everything can be a `interface{}`.

.play code/interface.go /^func main/,/^}/

Downsides? Yes, it's not compile-time safe.

* Tools

Because Go is very simple, it's really easy to build powerful tools for the language.

- `go` `get`: the dependency manager
- `go` `vet`: analyse and find common mistakes.
- `go` `lint`: checks for style violations.
- `go` `fmt`: curly braces on new line or the same? This does not happen in Go. There is The One True Way Of Formatting‚Ñ¢ and everyone uses the same. No style discussions in Go.
- `go` `imports`: automatically infer the imports of your code and add them and `go` `fmt` your code.

* Testing

`go` `test` runs our tests.

  go test -v ./mypkg/...

* Benchmarks

`go` `test` has out of the box support for benchmarks.

  go test -bench=. ./mypkg/...

  PASS
  benchmark                                    iter    time/iter
  ---------                                    ----    ---------
  BenchmarkCSSEscaper                       1000000   2843 ns/op
  BenchmarkCSSEscaperNoSpecials             5000000    671 ns/op
  BenchmarkDecodeCSS                        1000000   1183 ns/op
  ok  	html/template	62.874s

* Coverage

`go` `tool` `cover`: automatically generates a report of the coverage of your code. Even with HTML. Like this one:

.link http://127.0.0.1:4999/assets/coverage.html Example html coverage

  go test -coverprofile=cover.out ./mypkg
  go tool cover -hmtl=cover.out

* Tools

And a lot more. We can say many things about Go, but not that its tool ecosystem is not good.

.image https://media.giphy.com/media/l2Je0ZdFV02q7wncc/giphy.gif

* Libraries

The standard library of Go is very, very complete. It has packages for almost everything you will need.

.link https://golang.org/pkg/ The standard library

But, if you need more things just do a search on GitHub, there are tons of libraries.

.link https://github.com/search?o=desc&q=golang+web+framework&ref=searchresults&s=stars&type=Repositories&utf8=%E2%9C%93 Golang web frameworks on GitHub

Or take a look at `awesome-go` list.

.link https://github.com/avelino/awesome-go awesome-go

* Who uses Go?

- Google
- Docker
- CloudFlare
- DigitalOcean
- CoreOS
- source{d}
- Dropbox
- GitHub
- MongoDB

.link https://github.com/golang/go/wiki/GoUsers And a lot more

* Where to Go(lang) from here?

.link https://tour.golang.org/welcome/1 Golang interactive tour
.link https://golang.org/ref/spec Golang spec
.link https://golang.org/doc/faq Golang FAQ

* Questions?

Come on, don't be shy.

.image https://media.giphy.com/media/3orieXDSb5yko99Ht6/giphy.gif

* Well, thats it folks!

.image https://media.giphy.com/media/nTqBNQXlEixLa/giphy.gif
